/* INSTITUTO POLITECNICO NACIONAL  
ESCUELA SUPERIOR DE COMPUTO
Teoría Computacional
Profesor Genaro Juárez Martínez

Automata Finito no Determinista

Ricardo Alcaraz Fraga
2CV1 */

int j,i,state=0,longitud=3;
int cadena[] = new int [longitud];
PrintWriter camino_principal,caminos_derivados;

void setup()
{
    size(640,400);
    background(0);
    stroke(255);
    noLoop();
    int estado;
    
    for(int i=0;i<longitud;i++)
        cadena[i] = int(random(2));       
    
    for(i=0;i<longitud;i++)
        System.out.print(cadena[i]);
    
    System.out.println(" ");
    
    camino_principal = createWriter("Camino Principal.txt");
    caminos_derivados = createWriter("Caminos Derivados.txt");
    
    camino_principal.flush();
    caminos_derivados.flush();
    
    estado = 0;
    for(i=0;i<longitud;i++)
    {
        switch(cadena[i])
        {  
            case 1:
            
            // Si el estado está en qo
            if(estado == 0)
            {
                camino_principal.print("qo ");
                estado = 0;
            }
            
            else if(estado == 1)
            {
                camino_principal.print("q2 ");
                estado = 2;
            }
            
            else if(estado == 2)
            {
                estado = 0;
            }
            
            break;
            
            // Si llega un 0
            case 0:
            
            // Si estás en qo y llega un 0 se disparan dos procesos
            if(estado == 0)
            {
               camino_principal.print("qo ");
               j = i+1;
               thread("Caminodev");
               delay(1000);
            }
            
            else if(estado == 1)
            {
                camino_principal.print("qo");
                estado = 0;
            }
            
            else if(estado == 2)
            {
                camino_principal.print("qo ");
                estado = 0;
            }
         
            break;
        }
    }
    
    //delay(1000);
    
    if(state == 2)
    {
      System.out.println("Cadena Aceptada");
      camino_principal.print("\nCadena Aceptada");
    }
    
    else
    {
       System.out.println("Cadena rechazada");
       camino_principal.print("\nCadena Rechazada");   
    } 
    
    camino_principal.close();
    caminos_derivados.close();
    
}

// El hilo encargado de recorrer los caminos derivados 
void Caminodev()
{
    //System.out.println("Se disparó el proceso");
    caminos_derivados.print("q1 ");    
    state = 1;
    
    for(;j<longitud;j++)
    {
        switch(cadena[j])
        {
            case 1:
            
            if(state == 1)
            {
                caminos_derivados.print("q2 ");
                state = 2;
            }
            
            else if(state == 2)
            {
                caminos_derivados.println("(stuck) ");
                state = -1;
            }
            
            break;
            
            case 0:
            
            if(state == 1)
            {
                caminos_derivados.println("(stuck)");
                state = -1;
            }
            
            else if(state == 2)
            {
                caminos_derivados.println("(stuck)");
                state = -1;
            }
            
            break;
        }
    }
    
    //  System.out.println("Terminó de analizarse un hilo y acabó en el estado "+state);
}

void draw()
{   
    textSize(20);
    strokeWeight(6);
    // FLECHAS
    
    // Flecha de start
    line(87,height/2,140,height/2);
    line(126,190,140,height/2);
    line(126,210,140,height/2);
    
    // Flecha de q0 a q1
    line(202,height/2,293,height/2);
    line(280,190,293,height/2);
    line(280,210,293,height/2);
    
    // Flecha de q1 a q2
    line(356,height/2,444,height/2);
    line(431,190,444,height/2);
    line(431,210,444,height/2);
    
    // Flecha de qo a qo
    line(147,158,159,168);
    line(174,158,159,168);
    
    // ESTADOS
    
    // Estado q0
    ellipse(171,198,60,60);
    // Estado q1
    ellipse(324,198,60,60);
    // Estado q2 (FINAL)
    ellipse(477,198,60,60);
    noFill();
    stroke(0,200,0);
    ellipse(477,198,50,50);
   
    // TEXTOS
    fill(0,0,199);
    text("qo",160,199);
    text("q1",315,199);
    text("q2",468,199);
    text("0",237,180);
    text("0,1",187,141);
    text("1",398,180);
    
    // Linea de qo a qo
    noFill();
    stroke(255);
    ellipse(178,168,35,35);
    
}
